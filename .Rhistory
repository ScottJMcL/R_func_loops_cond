return("try again")
}
test_nums <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
print(test_nums)
fizz_nums <- fizzbuzz(test_nums)
fizzbuzz <- function(num){
if (num %% 3 == 0){
if (num %% 5 == 0){
return("fizzbuzz")
}else {
return("fizz")
}
}else if (num %% 5 == 0){
return('buzz')
}
return("try again")
}
test_nums <- list(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
print(test_nums)
fizz_nums <- fizzbuzz(test_nums)
fizzbuzz <- function(num){
if (num %% 3 == 0){
if (num %% 5 == 0){
return("fizzbuzz")
}else {
return("fizz")
}
}else if (num %% 5 == 0){
return('buzz')
}
return("try again")
}
test_nums <- list(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
print(test_nums)
for (number in test_nums){
fizzbuzz(number)
}
fizzbuzz(5)
fizzbuzz <- function(num){
if (num %% 3 == 0){
if (num %% 5 == 0){
return("fizzbuzz")
}else {
return("fizz")
}
}else if (num %% 5 == 0){
return('buzz')
}
return("try again")
}
test_nums <- list(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
#print(test_nums)
for (number in test_nums){
fizzbuzz(number)
}
fizzbuzz <- function(num){
if (num %% 3 == 0){
if (num %% 5 == 0){
return("fizzbuzz")
}else {
return("fizz")
}
}else if (num %% 5 == 0){
return('buzz')
}
return("try again")
}
fizzbuzz(10)
fizzbuzz(3)
fizzbuzz(6)
fizzbuzz(15)
test_nums <- list(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
#print(test_nums)
for (number in test_nums){
fizzbuzz(number)
}
fizzbuzz <- function(num){
if (num %% 3 == 0){
if (num %% 5 == 0){
return("fizzbuzz")
}else {
return("fizz")
}
}else if (num %% 5 == 0){
return('buzz')
}
return("try again")
}
fizzbuzz(10)
fizzbuzz(3)
fizzbuzz(6)
fizzbuzz(15)
test_nums <- list(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
#print(test_nums)
for (number in 1:20){
fizzbuzz(number)
}
fizzbuzz(5)
fizzbuzz <- function(num){
if (num %% 3 == 0){
if (num %% 5 == 0){
return("fizzbuzz")
}else {
return("fizz")
}
}else if (num %% 5 == 0){
return('buzz')
}
return("try again")
}
fizzbuzz(10)
fizzbuzz(3)
fizzbuzz(6)
fizzbuzz(15)
test_nums <- list(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
#print(test_nums)
for (number in 1:20){
print(fizzbuzz(number))
}
# fizzbuzz(5)
fizzbuzz <- function(num){
if (num %% 3 == 0){
if (num %% 5 == 0){
return("fizzbuzz")
}else {
return("fizz")
}
}else if (num %% 5 == 0){
return('buzz')
}
return("not divisible by 3 or 5")
}
fizzbuzz(10)
fizzbuzz(3)
fizzbuzz(6)
fizzbuzz(15)
for (number in 1:20){
print(fizzbuzz(number))
}
# fizzbuzz(5)
fizzbuzz <- function(num){
if (num %% 3 == 0){
if (num %% 5 == 0){
return("fizzbuzz")
}else {
return("fizz")
}
}else if (num %% 5 == 0){
return('buzz')
}
return("not divisible by 3 or 5")
}
fizzbuzz(10)
fizzbuzz(3)
fizzbuzz(6)
fizzbuzz(15)
for (number in 1:20){
print(paste(number, fizzbuzz(number))
}
fizzbuzz <- function(num){
if (num %% 3 == 0){
if (num %% 5 == 0){
return("fizzbuzz")
}else {
return("fizz")
}
}else if (num %% 5 == 0){
return('buzz')
}
return("not divisible by 3 or 5")
}
fizzbuzz(10)
fizzbuzz(3)
fizzbuzz(6)
fizzbuzz(15)
for (number in 1:20){
print(paste(number, fizzbuzz(number)))
}
# fizzbuzz(5)
fizzbuzz <- function(num){
if (num %% 3 == 0){
if (num %% 5 == 0){
return("fizzbuzz")
}else {
return("fizz")
}
}else if (num %% 5 == 0){
return('buzz')
}
return("not divisible by 3 or 5")
}
fizzbuzz(10)
fizzbuzz(3)
fizzbuzz(6)
fizzbuzz(15)
for (number in 1:20){
print(paste(number, 'is', fizzbuzz(number)))
}
# fizzbuzz(5)
# You may feel more comfortable figuring this out in Python first, then translating into R later.
marioStairs <- function(steps){
num_x <- 0
while (steps > 0 ){
num_x <- num_x + 1
print("X" * num_x)
steps <- steps - 1
}
}
marioStairs(5)
# You may feel more comfortable figuring this out in Python first, then translating into R later.
marioStairs <- function(steps){
num_x <- 0
while (steps > 0 ){
num_x <- num_x + 1
print("X")
steps <- steps - 1
}
}
marioStairs(5)
# You may feel more comfortable figuring this out in Python first, then translating into R later.
marioStairs <- function(steps){
num_x <- 0
while (steps > 0 ){
num_x <- num_x + 1
i <- 0
level <- ''
while (num_x - i){
paste(level,"X",sep = '')
}
steps <- steps - 1
print(level)
}
}
marioStairs(5)
# You may feel more comfortable figuring this out in Python first, then translating into R later.
marioStairs <- function(steps){
num_x <- 0
while (steps > 0 ){
num_x <- num_x + 1
i <- 0
level <- ''
while (num_x - i){
paste(level,"X",sep = '')
i <- i + 1
}
steps <- steps - 1
print(level)
}
}
marioStairs(5)
# You may feel more comfortable figuring this out in Python first, then translating into R later.
marioStairs <- function(steps){
num_x <- 0
while (steps > 0 ){
num_x <- num_x + 1
i <- 0
level <- ''
while (num_x >= i){
paste(level,"X",sep = '')
i <- i + 1
}
steps <- steps - 1
print(level)
}
}
marioStairs(5)
# You may feel more comfortable figuring this out in Python first, then translating into R later.
marioStairs <- function(steps){
num_x <- 0
while (steps > 0 ){
num_x <- num_x + 1
i <- 0
level <- ''
while (num_x >= i){
level <- paste(level,"X",sep = '')
i <- i + 1
}
steps <- steps - 1
print(level)
}
}
marioStairs(5)
# You may feel more comfortable figuring this out in Python first, then translating into R later.
marioStairs <- function(steps){
num_x <- 0
while (steps > 0 ){
num_x <- num_x + 1
i <- 0
level <- ''
while (num_x > i){
level <- paste(level,"X",sep = '')
i <- i + 1
}
steps <- steps - 1
print(level)
}
}
marioStairs(5)
# You may feel more comfortable figuring this out in Python first, then translating into R later.
marioStairs <- function(steps){
num_x <- 0
while (steps > 0 ){
num_x <- num_x + 1
i <- 0
level <- ''
while (num_x > i){
level <- paste(level,"X",sep = '')
i <- i + 1
}
steps <- steps - 1
print(level)
}
}
marioStairs(20)
# You may feel more comfortable figuring this out in Python first, then translating into R later.
marioStairs <- function(steps){
num_x <- 0
while (steps > 0 ){
num_x <- num_x + 1
i <- 0
level <- ''
while (num_x > i){
level <- paste(level,"X",sep = '')
i <- i + 1
}
steps <- steps - 1
print(level)
}
}
marioStairs(7)
#5: Small enough? - Beginner
# You will be given an array and a limit value. You must check that all values in the array are below or equal to the limit value. If they are, return true. Else, return false.
# This was boring.
small_enough <- function(vector, limit) {
return(max(vector) <= limit)
}
small_enough(c(2,1,4,6,2,4,5,3,54), 12)
#5: Small enough? - Beginner
# You will be given an array and a limit value. You must check that all values in the array are below or equal to the limit value. If they are, return true. Else, return false.
# This was boring.
small_enough <- function(vector, limit) {
return(max(vector) <= limit)
}
small_enough(c(2,1,4,6,2,4,5,3), 12)
#5: Small enough? - Beginner
# You will be given an array and a limit value. You must check that all values in the array are below or equal to the limit value. If they are, return true. Else, return false.
# This was boring.
small_enough <- function(vector, limit) {
return(max(vector) <= limit)
}
small_enough(c(2,1,4,6,2,4,5,3,20), 12)
small_enough(c(2,1,4,6,2,4,5,3), 12)
#4: Count the divisors of a number
# Count the number of divisors of a positive integer n.
divisors <- function(n) {
divs <- c(n)
i <- 2
for (num in 1:n){
if (n %% num == 0){
divs[i] = num
i <- i + 1
}
}
return(length(divs) - 1)
}
divisors(49)
#4: Count the divisors of a number
# Count the number of divisors of a positive integer n.
divisors <- function(n) {
divs <- c(n)
i <- 2
for (num in 1:n){
if (n %% num == 0){
divs[i] = num
i <- i + 1
}
}
return(length(divs) - 1)
}
divisors(50)
#4: Count the divisors of a number
# Count the number of divisors of a positive integer n.
divisors <- function(n) {
divs <- c(n)
i <- 2
for (num in 1:n){
if (n %% num == 0){
divs[i] = num
i <- i + 1
}
}
return((length(divs) - 1), divs)
}
divisors(50)
#4: Count the divisors of a number
# Count the number of divisors of a positive integer n.
divisors <- function(n) {
divs <- c(n)
i <- 2
for (num in 1:n){
if (n %% num == 0){
divs[i] = num
i <- i + 1
}
}
return((length(divs) - 1))
}
divisors(50)
#4: Count the divisors of a number
# Count the number of divisors of a positive integer n.
divisors <- function(n) {
divs <- c(n)
i <- 2
for (num in 1:n){
if (n %% num == 0){
divs[i] = num
i <- i + 1
}
}
return(divs)
return((length(divs) - 1))
}
divisors(50)
#4: Count the divisors of a number
# Count the number of divisors of a positive integer n.
divisors <- function(n) {
divs <- c(n)
i <- 2
for (num in 1:n){
if (n %% num == 0){
divs[i] = num
i <- i + 1
}
}
# return(divs)
return((length(divs) - 1))
}
divisors(50)
#3: Testing 1-2-3
# Your team is writing a fancy new text editor and you've been tasked with implementing the line numbering.
# Write a function which takes a list of strings and returns each line prepended by the correct number.
# The numbering starts at 1. The format is n: string. Notice the colon and space in between.
number <- function(lines) {
i <- 1
result <- c()
for (line in lines) {
result[i] <- paste(i,': ', line, sep = '')
i <- i + 1
}
return(result)
}
number(c('a', 'b', 'c', 'I want a cookie'))
#3: Testing 1-2-3
# Your team is writing a fancy new text editor and you've been tasked with implementing the line numbering.
# Write a function which takes a list of strings and returns each line prepended by the correct number.
# The numbering starts at 1. The format is n: string. Notice the colon and space in between.
number <- function(lines) {
i <- 1
result <- c()
for (line in lines) {
result[i] <- paste(i,': ', line, sep = '')
i <- i + 1
}
result
}
number(c('a', 'b', 'c', 'I want a cookie'))
#3: Testing 1-2-3
# Your team is writing a fancy new text editor and you've been tasked with implementing the line numbering.
# Write a function which takes a list of strings and returns each line prepended by the correct number.
# The numbering starts at 1. The format is n: string. Notice the colon and space in between.
number <- function(lines) {
i <- 1
result <- c()
for (line in lines) {
result[i] <- paste(i,': ', line, sep = '')
i <- i + 1
}
print(result)
}
number(c('a', 'b', 'c', 'I want a cookie'))
#2: Breaking chocolate problem
# Your task is to split the chocolate bar of given dimension n x m into small squares. Each square is of size 1x1 and unbreakable. Implement a function that will return minimum number of breaks needed.
# For example if you are given a chocolate bar of size 2 x 1 you can split it to single squares in just one break, but for size 3 x 1 you must do two breaks.
# If input data is invalid you should return 0 (as in no breaks are needed if we do not have any chocolate to split). Input will always be a non-negative integer.
break_chocolate <- function (n, m) {
# test for zero
# n * m - 1
if (n ==0 | m == 0){return(0)}
return(n*m-1)
}
#2: Breaking chocolate problem
# Your task is to split the chocolate bar of given dimension n x m into small squares. Each square is of size 1x1 and unbreakable. Implement a function that will return minimum number of breaks needed.
# For example if you are given a chocolate bar of size 2 x 1 you can split it to single squares in just one break, but for size 3 x 1 you must do two breaks.
# If input data is invalid you should return 0 (as in no breaks are needed if we do not have any chocolate to split). Input will always be a non-negative integer.
break_chocolate <- function (n, m) {
# test for zero
# n * m - 1
if (n ==0 | m == 0){return(0)}
return(n*m-1)
}
break_chocolate(4,9)
#1: Remove the minimum
# Task:
# Given an array of integers, remove the smallest value. Do not mutate the original array/list. If there are multiple elements with the same value, remove the one with a lower index. If you get an empty array/list, return an empty array/list.
# Don't change the order of the elements that are left.
remove_smallest <- function(numbers){
if (length(numbers) == 0){return(numbers)
}else {
return(numbers[-match(min(numbers), numbers)[1]])
}
}
remove_smallest(c(3,3,5,75,2,2,4,6,1,4,6,9))
